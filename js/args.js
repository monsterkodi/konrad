(function() {
  /*
   0000000   00000000    0000000    0000000
  000   000  000   000  000        000     
  000000000  0000000    000  0000  0000000 
  000   000  000   000  000   000       000
  000   000  000   000   0000000   0000000 
  */
  var _, karg, log, pkg;

  ({karg, log, _} = require('kxk'));

  pkg = require('../package.json');

  module.exports = karg(`\nkonrad\n    arguments  . ? see arguments                   . **\n    bump       . ? bump package.* version          . = false\n    commit     . ? add, commit and push            . = false\n    publish    . ? bump, commit & publish to npm   . = false\n    update     . ? update npm packages             . = false\n    test       . ? run tests                       . = false\n    watch      . ? watch directory for changes     . = false\n    run        . ? build dirty or missing targets  . = false\n    rebuild    . ? rebuild all targets             . = false . - R\n    info       . ? show build status               . = false\n    status     . ? show git status                 . = false\n    diff       . ? show git diff                   . = false\n    verbose    . ? log more                        . = false\n    quiet      . ? log nothing                     . = false\n    debug      . ? log debug                       . = false . - D\n    logtime    . ? log with time                   . = true\n\narguments\n    watch        directory to watch         ${'.'.magenta}\n    info         directory to inspect       ${'.'.magenta}\n    status       files or directory         ${'.'.magenta}\n    diff         files or directory         ${'.'.magenta}\n    run          directory to build         ${'.'.magenta}\n    rebuild      directory to rebuild       ${'.'.magenta}\n    bump         semver version             ${'minor'.magenta}\n    commit       commit message\n    publish      commit message\n\nversion  ${pkg.version}`);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsianMvYXJncy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTs7RUFRQSxDQUFBLENBQUUsSUFBRixFQUFRLEdBQVIsRUFBYSxDQUFiLENBQUEsR0FBbUIsT0FBQSxDQUFRLEtBQVIsQ0FBbkI7O0VBRUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxpQkFBUjs7RUFFTixNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFBLENBQUssQ0FBQSx5aUNBQUEsQ0FBQSxDQXFCd0IsR0FBRyxDQUFDLE9BckI1QixDQXFCb0MsOENBckJwQyxDQUFBLENBc0J3QixHQUFHLENBQUMsT0F0QjVCLENBc0JvQyw4Q0F0QnBDLENBQUEsQ0F1QndCLEdBQUcsQ0FBQyxPQXZCNUIsQ0F1Qm9DLDhDQXZCcEMsQ0FBQSxDQXdCd0IsR0FBRyxDQUFDLE9BeEI1QixDQXdCb0MsOENBeEJwQyxDQUFBLENBeUJ3QixHQUFHLENBQUMsT0F6QjVCLENBeUJvQyw4Q0F6QnBDLENBQUEsQ0EwQndCLEdBQUcsQ0FBQyxPQTFCNUIsQ0EwQm9DLDhDQTFCcEMsQ0FBQSxDQTJCd0IsT0FBTyxDQUFDLE9BM0JoQyxDQTJCd0MsK0VBM0J4QyxDQUFBLENBK0JYLEdBQUcsQ0FBQyxPQS9CTyxDQUFBLENBQUw7QUFaakIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgIFxuMDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgMDAwMCAgMDAwMDAwMCBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwIFxuIyMjXG5cbnsga2FyZywgbG9nLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbnBrZyA9IHJlcXVpcmUgJy4uL3BhY2thZ2UuanNvbidcblxubW9kdWxlLmV4cG9ydHMgPSBrYXJnIFwiXCJcIlxuXG5rb25yYWRcbiAgICBhcmd1bWVudHMgIC4gPyBzZWUgYXJndW1lbnRzICAgICAgICAgICAgICAgICAgIC4gKipcbiAgICBidW1wICAgICAgIC4gPyBidW1wIHBhY2thZ2UuKiB2ZXJzaW9uICAgICAgICAgIC4gPSBmYWxzZVxuICAgIGNvbW1pdCAgICAgLiA/IGFkZCwgY29tbWl0IGFuZCBwdXNoICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgcHVibGlzaCAgICAuID8gYnVtcCwgY29tbWl0ICYgcHVibGlzaCB0byBucG0gICAuID0gZmFsc2VcbiAgICB1cGRhdGUgICAgIC4gPyB1cGRhdGUgbnBtIHBhY2thZ2VzICAgICAgICAgICAgIC4gPSBmYWxzZVxuICAgIHRlc3QgICAgICAgLiA/IHJ1biB0ZXN0cyAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgd2F0Y2ggICAgICAuID8gd2F0Y2ggZGlyZWN0b3J5IGZvciBjaGFuZ2VzICAgICAuID0gZmFsc2VcbiAgICBydW4gICAgICAgIC4gPyBidWlsZCBkaXJ0eSBvciBtaXNzaW5nIHRhcmdldHMgIC4gPSBmYWxzZVxuICAgIHJlYnVpbGQgICAgLiA/IHJlYnVpbGQgYWxsIHRhcmdldHMgICAgICAgICAgICAgLiA9IGZhbHNlIC4gLSBSXG4gICAgaW5mbyAgICAgICAuID8gc2hvdyBidWlsZCBzdGF0dXMgICAgICAgICAgICAgICAuID0gZmFsc2VcbiAgICBzdGF0dXMgICAgIC4gPyBzaG93IGdpdCBzdGF0dXMgICAgICAgICAgICAgICAgIC4gPSBmYWxzZVxuICAgIGRpZmYgICAgICAgLiA/IHNob3cgZ2l0IGRpZmYgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgdmVyYm9zZSAgICAuID8gbG9nIG1vcmUgICAgICAgICAgICAgICAgICAgICAgICAuID0gZmFsc2VcbiAgICBxdWlldCAgICAgIC4gPyBsb2cgbm90aGluZyAgICAgICAgICAgICAgICAgICAgIC4gPSBmYWxzZVxuICAgIGRlYnVnICAgICAgLiA/IGxvZyBkZWJ1ZyAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlIC4gLSBEXG4gICAgbG9ndGltZSAgICAuID8gbG9nIHdpdGggdGltZSAgICAgICAgICAgICAgICAgICAuID0gdHJ1ZVxuXG5hcmd1bWVudHNcbiAgICB3YXRjaCAgICAgICAgZGlyZWN0b3J5IHRvIHdhdGNoICAgICAgICAgI3snLicubWFnZW50YX1cbiAgICBpbmZvICAgICAgICAgZGlyZWN0b3J5IHRvIGluc3BlY3QgICAgICAgI3snLicubWFnZW50YX1cbiAgICBzdGF0dXMgICAgICAgZmlsZXMgb3IgZGlyZWN0b3J5ICAgICAgICAgI3snLicubWFnZW50YX1cbiAgICBkaWZmICAgICAgICAgZmlsZXMgb3IgZGlyZWN0b3J5ICAgICAgICAgI3snLicubWFnZW50YX1cbiAgICBydW4gICAgICAgICAgZGlyZWN0b3J5IHRvIGJ1aWxkICAgICAgICAgI3snLicubWFnZW50YX1cbiAgICByZWJ1aWxkICAgICAgZGlyZWN0b3J5IHRvIHJlYnVpbGQgICAgICAgI3snLicubWFnZW50YX1cbiAgICBidW1wICAgICAgICAgc2VtdmVyIHZlcnNpb24gICAgICAgICAgICAgI3snbWlub3InLm1hZ2VudGF9XG4gICAgY29tbWl0ICAgICAgIGNvbW1pdCBtZXNzYWdlXG4gICAgcHVibGlzaCAgICAgIGNvbW1pdCBtZXNzYWdlXG5cbnZlcnNpb24gICN7cGtnLnZlcnNpb259XG5cIlwiXCJcbiJdfQ==
//# sourceURL=/Users/kodi/s/konrad/coffee/args.coffee