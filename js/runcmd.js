// koffee 1.14.0

/*
00000000   000   000  000   000   0000000  00     00  0000000  
000   000  000   000  0000  000  000       000   000  000   000
0000000    000   000  000 0 000  000       000000000  000   000
000   000  000   000  000  0000  000       000 0 000  000   000
000   000   0000000   000   000   0000000  000   000  0000000
 */
var args, childp, klog, kolor, konradError, pretty, ref, runcmd, slash, valid;

ref = require('kxk'), args = ref.args, childp = ref.childp, klog = ref.klog, kolor = ref.kolor, slash = ref.slash, valid = ref.valid;

pretty = require('./pretty');

konradError = require('./error');

runcmd = function(cmd, cmdargs, cwd) {
    var cmdpath, command, err, result;
    try {
        if (cmd === 'test') {
            if (valid(cmdargs) && 0 < cmdargs.indexOf('.coffee')) {
                cmdpath = 'mocha -c --require koffee/js/register ';
            } else {
                cmdpath = 'npm run test';
            }
        } else {
            cmdpath = slash.resolve(slash.join(__dirname, '..', 'bin', cmd));
        }
        if (slash.win()) {
            command = "bash " + cmdpath + " " + cmdargs;
        } else {
            command = cmdpath + " " + cmdargs;
        }
        if (args.verbose) {
            klog("ðŸ”§ ", kolor.gray(cmd), pretty.filePath(command));
        }
        result = childp.execSync(command, {
            cwd: cwd,
            encoding: 'utf8',
            stdio: 'inherit',
            shell: true
        });
    } catch (error) {
        err = error;
        konradError("command error", "command '" + cmd + "' (" + command + ") " + 'failed!', err);
        return false;
    }
    return true;
};

module.exports = runcmd;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuY21kLmpzIiwic291cmNlUm9vdCI6Ii4uL2NvZmZlZSIsInNvdXJjZXMiOlsicnVuY21kLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxNQUE4QyxPQUFBLENBQVEsS0FBUixDQUE5QyxFQUFFLGVBQUYsRUFBUSxtQkFBUixFQUFnQixlQUFoQixFQUFzQixpQkFBdEIsRUFBNkIsaUJBQTdCLEVBQW9DOztBQUVwQyxNQUFBLEdBQWMsT0FBQSxDQUFRLFVBQVI7O0FBQ2QsV0FBQSxHQUFjLE9BQUEsQ0FBUSxTQUFSOztBQUVkLE1BQUEsR0FBUyxTQUFDLEdBQUQsRUFBTSxPQUFOLEVBQWUsR0FBZjtBQUVMLFFBQUE7QUFBQTtRQUNJLElBQUcsR0FBQSxLQUFPLE1BQVY7WUFDSSxJQUFHLEtBQUEsQ0FBTSxPQUFOLENBQUEsSUFBbUIsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQWhCLENBQTFCO2dCQUNJLE9BQUEsR0FBVSx5Q0FEZDthQUFBLE1BQUE7Z0JBR0ksT0FBQSxHQUFVLGVBSGQ7YUFESjtTQUFBLE1BQUE7WUFNSSxPQUFBLEdBQVUsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFLLENBQUMsSUFBTixDQUFXLFNBQVgsRUFBc0IsSUFBdEIsRUFBMkIsS0FBM0IsRUFBaUMsR0FBakMsQ0FBZCxFQU5kOztRQVFBLElBQUcsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFIO1lBQ0ksT0FBQSxHQUFVLE9BQUEsR0FBUSxPQUFSLEdBQWdCLEdBQWhCLEdBQW1CLFFBRGpDO1NBQUEsTUFBQTtZQUdJLE9BQUEsR0FBYSxPQUFELEdBQVMsR0FBVCxHQUFZLFFBSDVCOztRQUtBLElBQUcsSUFBSSxDQUFDLE9BQVI7WUFDSSxJQUFBLENBQUssS0FBTCxFQUFXLEtBQUssQ0FBQyxJQUFOLENBQVcsR0FBWCxDQUFYLEVBQTRCLE1BQU0sQ0FBQyxRQUFQLENBQWdCLE9BQWhCLENBQTVCLEVBREo7O1FBR0EsTUFBQSxHQUFTLE1BQU0sQ0FBQyxRQUFQLENBQWdCLE9BQWhCLEVBQ0w7WUFBQSxHQUFBLEVBQVUsR0FBVjtZQUNBLFFBQUEsRUFBVSxNQURWO1lBRUEsS0FBQSxFQUFVLFNBRlY7WUFHQSxLQUFBLEVBQVUsSUFIVjtTQURLLEVBakJiO0tBQUEsYUFBQTtRQXlCTTtRQUNGLFdBQUEsQ0FBWSxlQUFaLEVBQTRCLFdBQUEsR0FBWSxHQUFaLEdBQWdCLEtBQWhCLEdBQXFCLE9BQXJCLEdBQTZCLElBQTdCLEdBQWlDLFNBQTdELEVBQXlFLEdBQXpFO0FBQ0EsZUFBTyxNQTNCWDs7V0E0QkE7QUE5Qks7O0FBZ0NULE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAgICAgIDAwICAwMDAwMDAwICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgMDAwIDAgMDAwICAwMDAgICAwMDBcbjAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuIyMjXG5cbnsgYXJncywgY2hpbGRwLCBrbG9nLCBrb2xvciwgc2xhc2gsIHZhbGlkIH0gPSByZXF1aXJlICdreGsnXG5cbnByZXR0eSAgICAgID0gcmVxdWlyZSAnLi9wcmV0dHknXG5rb25yYWRFcnJvciA9IHJlcXVpcmUgJy4vZXJyb3InXG5cbnJ1bmNtZCA9IChjbWQsIGNtZGFyZ3MsIGN3ZCkgLT5cbiAgICBcbiAgICB0cnlcbiAgICAgICAgaWYgY21kID09ICd0ZXN0J1xuICAgICAgICAgICAgaWYgdmFsaWQoY21kYXJncykgYW5kIDAgPCBjbWRhcmdzLmluZGV4T2YoJy5jb2ZmZWUnKVxuICAgICAgICAgICAgICAgIGNtZHBhdGggPSAnbW9jaGEgLWMgLS1yZXF1aXJlIGtvZmZlZS9qcy9yZWdpc3RlciAnXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY21kcGF0aCA9ICducG0gcnVuIHRlc3QnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNtZHBhdGggPSBzbGFzaC5yZXNvbHZlIHNsYXNoLmpvaW4gX19kaXJuYW1lLCAnLi4nICdiaW4nIGNtZFxuICAgICAgICBcbiAgICAgICAgaWYgc2xhc2gud2luKClcbiAgICAgICAgICAgIGNvbW1hbmQgPSBcImJhc2ggI3tjbWRwYXRofSAje2NtZGFyZ3N9XCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29tbWFuZCA9IFwiI3tjbWRwYXRofSAje2NtZGFyZ3N9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiBhcmdzLnZlcmJvc2VcbiAgICAgICAgICAgIGtsb2cgXCLwn5SnIFwiIGtvbG9yLmdyYXkoY21kKSwgcHJldHR5LmZpbGVQYXRoKGNvbW1hbmQpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IGNoaWxkcC5leGVjU3luYyBjb21tYW5kLFxuICAgICAgICAgICAgY3dkOsKgICAgICBjd2RcbiAgICAgICAgICAgIGVuY29kaW5nOsKgJ3V0ZjgnXG4gICAgICAgICAgICBzdGRpbzrCoCAgICdpbmhlcml0J1xuICAgICAgICAgICAgc2hlbGw6ICAgIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAjIGtsb2cgJ3Jlc3VsdCcgcmVzdWx0XG4gICAgICAgICAgXG4gICAgY2F0Y2ggZXJyXG4gICAgICAgIGtvbnJhZEVycm9yIFwiY29tbWFuZCBlcnJvclwiIFwiY29tbWFuZCAnI3tjbWR9JyAoI3tjb21tYW5kfSkgI3snZmFpbGVkISd9XCIgZXJyXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBydW5jbWRcbiJdfQ==
//# sourceURL=../coffee/runcmd.coffee