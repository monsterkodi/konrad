(function() {
  /*
   0000000   0000000   00     00  00000000   000  000      00000000  
  000       000   000  000   000  000   000  000  000      000       
  000       000   000  000000000  00000000   000  000      0000000   
  000       000   000  000 0 000  000        000  000      000       
   0000000   0000000   000   000  000        000  0000000  00000000  
  */
  var _, atomic, compile, error, fs, konradError, log, noon, slash;

  ({atomic, noon, slash, error, log, fs, _} = require('kxk'));

  konradError = require('./error');

  compile = function(sourceText, ext, sourceFile, targetFile, cfg) {
    var coffee, compiled, e, jsMap, mapcfg, pug, stylus;
    try {
      compiled = (function() {
        var ref;
        switch (ext) {
          case 'coffee':
            coffee = require('coffeescript');
            if ((ref = cfg[ext]) != null ? ref.map : void 0) {
              mapcfg = {
                bare: true,
                sourceMap: true,
                inlineMap: true,
                sourceRoot: '.',
                filename: slash.relative(sourceFile, slash.dir(targetFile)),
                generatedFile: slash.file(targetFile)
              };
              jsMap = coffee.compile(sourceText, mapcfg);
              return jsMap.js;
            } else {
              return coffee.compile(sourceText, {
                bare: true
              });
            }
            break;
          case 'styl':
            stylus = require('stylus');
            return stylus(sourceText).set('filename', sourceFile).set('paths', [slash.dir(sourceFile)]).render();
          case 'pug':
            pug = require('pug');
            return pug.render(sourceText, {
              pretty: true
            });
          case 'json':
            return noon.stringify(JSON.parse(sourceText), {
              ext: '.' + cfg[ext].ext,
              indent: '  ',
              maxalign: 16
            });
          case 'noon':
            return noon.stringify(noon.parse(sourceText), {
              ext: '.' + cfg[ext].ext,
              indent: '  '
            });
          default:
            throw `don't know how to build files with extname .${ext.bold}!`.yellow;
        }
      })();
    } catch (error1) {
      e = error1;
      konradError('compile error', e, sourceFile);
      return null;
    }
    return compiled;
  };

  module.exports = compile;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIuLi9jb2ZmZWUvY29tcGlsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQTs7Ozs7OztBQUFBLE1BQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxXQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTs7RUFRQSxDQUFBLENBQUUsTUFBRixFQUFVLElBQVYsRUFBZ0IsS0FBaEIsRUFBdUIsS0FBdkIsRUFBOEIsR0FBOUIsRUFBbUMsRUFBbkMsRUFBdUMsQ0FBdkMsQ0FBQSxHQUE2QyxPQUFBLENBQVEsS0FBUixDQUE3Qzs7RUFFQSxXQUFBLEdBQWMsT0FBQSxDQUFRLFNBQVI7O0VBRWQsT0FBQSxHQUFVLFFBQUEsQ0FBQyxVQUFELEVBQWEsR0FBYixFQUFrQixVQUFsQixFQUE4QixVQUE5QixFQUEwQyxHQUExQyxDQUFBO0FBRU4sUUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQTtBQUFBO01BQ0ksUUFBQTs7QUFBVyxnQkFBTyxHQUFQO0FBQUEsZUFFRixRQUZFO1lBSUgsTUFBQSxHQUFTLE9BQUEsQ0FBUSxjQUFSO1lBRVQsa0NBQVcsQ0FBRSxZQUFiO2NBQ0ksTUFBQSxHQUNJO2dCQUFBLElBQUEsRUFBZSxJQUFmO2dCQUNBLFNBQUEsRUFBZSxJQURmO2dCQUVBLFNBQUEsRUFBZSxJQUZmO2dCQUdBLFVBQUEsRUFBZSxHQUhmO2dCQUlBLFFBQUEsRUFBZSxLQUFLLENBQUMsUUFBTixDQUFlLFVBQWYsRUFBMkIsS0FBSyxDQUFDLEdBQU4sQ0FBVSxVQUFWLENBQTNCLENBSmY7Z0JBS0EsYUFBQSxFQUFlLEtBQUssQ0FBQyxJQUFOLENBQVcsVUFBWDtjQUxmO2NBT0osS0FBQSxHQUFRLE1BQU0sQ0FBQyxPQUFQLENBQWUsVUFBZixFQUEyQixNQUEzQjtxQkFDUixLQUFLLENBQUMsR0FWVjthQUFBLE1BQUE7cUJBWUksTUFBTSxDQUFDLE9BQVAsQ0FBZSxVQUFmLEVBQTJCO2dCQUFBLElBQUEsRUFBSztjQUFMLENBQTNCLEVBWko7O0FBSkM7QUFGRSxlQW9CRixNQXBCRTtZQXNCSCxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7bUJBQ1QsTUFBQSxDQUFPLFVBQVAsQ0FDSSxDQUFDLEdBREwsQ0FDUyxVQURULEVBQ3FCLFVBRHJCLENBRUksQ0FBQyxHQUZMLENBRVMsT0FGVCxFQUVrQixDQUFDLEtBQUssQ0FBQyxHQUFOLENBQVUsVUFBVixDQUFELENBRmxCLENBR0ksQ0FBQyxNQUhMLENBQUE7QUF2QkcsZUE0QkYsS0E1QkU7WUE4QkgsR0FBQSxHQUFNLE9BQUEsQ0FBUSxLQUFSO21CQUNOLEdBQUcsQ0FBQyxNQUFKLENBQVcsVUFBWCxFQUF1QjtjQUFBLE1BQUEsRUFBUTtZQUFSLENBQXZCO0FBL0JHLGVBaUNGLE1BakNFO21CQW1DSCxJQUFJLENBQUMsU0FBTCxDQUFlLElBQUksQ0FBQyxLQUFMLENBQVcsVUFBWCxDQUFmLEVBQXVDO2NBQUEsR0FBQSxFQUFLLEdBQUEsR0FBSSxHQUFJLENBQUEsR0FBQSxDQUFJLENBQUMsR0FBbEI7Y0FBdUIsTUFBQSxFQUFRLElBQS9CO2NBQXFDLFFBQUEsRUFBVTtZQUEvQyxDQUF2QztBQW5DRyxlQXFDRixNQXJDRTttQkF1Q0gsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFJLENBQUMsS0FBTCxDQUFXLFVBQVgsQ0FBZixFQUF1QztjQUFBLEdBQUEsRUFBSyxHQUFBLEdBQUksR0FBSSxDQUFBLEdBQUEsQ0FBSSxDQUFDLEdBQWxCO2NBQXVCLE1BQUEsRUFBUTtZQUEvQixDQUF2QztBQXZDRztZQXlDSCxNQUFNLENBQUEsNENBQUEsQ0FBQSxDQUErQyxHQUFHLENBQUMsSUFBbkQsQ0FBd0QsQ0FBeEQsQ0FBMEQsQ0FBQztBQXpDOUQ7V0FEZjtLQUFBLGNBQUE7TUE0Q007TUFDRixXQUFBLENBQVksZUFBWixFQUE2QixDQUE3QixFQUFnQyxVQUFoQztBQUNBLGFBQU8sS0E5Q1g7O1dBZ0RBO0VBbERNOztFQW9EVixNQUFNLENBQUMsT0FBUCxHQUFpQjtBQWhFakIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiMjI1xuXG57IGF0b21pYywgbm9vbiwgc2xhc2gsIGVycm9yLCBsb2csIGZzLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbmtvbnJhZEVycm9yID0gcmVxdWlyZSAnLi9lcnJvcidcblxuY29tcGlsZSA9IChzb3VyY2VUZXh0LCBleHQsIHNvdXJjZUZpbGUsIHRhcmdldEZpbGUsIGNmZykgLT5cbiAgICBcbiAgICB0cnlcbiAgICAgICAgY29tcGlsZWQgPSBzd2l0Y2ggZXh0XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ2NvZmZlZSdcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb2ZmZWUgPSByZXF1aXJlICdjb2ZmZWVzY3JpcHQnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgY2ZnW2V4dF0/Lm1hcFxuICAgICAgICAgICAgICAgICAgICBtYXBjZmcgPVxuICAgICAgICAgICAgICAgICAgICAgICAgYmFyZTogICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTWFwOiAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lTWFwOiAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlUm9vdDogICAgJy4nXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogICAgICBzbGFzaC5yZWxhdGl2ZSBzb3VyY2VGaWxlLCBzbGFzaC5kaXIgdGFyZ2V0RmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkRmlsZTogc2xhc2guZmlsZSB0YXJnZXRGaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAganNNYXAgPSBjb2ZmZWUuY29tcGlsZSBzb3VyY2VUZXh0LCBtYXBjZmdcbiAgICAgICAgICAgICAgICAgICAganNNYXAuanNcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvZmZlZS5jb21waWxlIHNvdXJjZVRleHQsIGJhcmU6dHJ1ZVxuXG4gICAgICAgICAgICB3aGVuICdzdHlsJ1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN0eWx1cyA9IHJlcXVpcmUgJ3N0eWx1cydcbiAgICAgICAgICAgICAgICBzdHlsdXMgc291cmNlVGV4dFxuICAgICAgICAgICAgICAgICAgICAuc2V0ICdmaWxlbmFtZScsIHNvdXJjZUZpbGVcbiAgICAgICAgICAgICAgICAgICAgLnNldCAncGF0aHMnLCBbc2xhc2guZGlyIHNvdXJjZUZpbGVdXG4gICAgICAgICAgICAgICAgICAgIC5yZW5kZXIoKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ3B1ZydcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwdWcgPSByZXF1aXJlICdwdWcnXG4gICAgICAgICAgICAgICAgcHVnLnJlbmRlciBzb3VyY2VUZXh0LCBwcmV0dHk6IHRydWVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ2pzb24nXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbm9vbi5zdHJpbmdpZnkgSlNPTi5wYXJzZShzb3VyY2VUZXh0KSwgZXh0OiAnLicrY2ZnW2V4dF0uZXh0LCBpbmRlbnQ6ICcgICcsIG1heGFsaWduOiAxNlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiAnbm9vbidcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBub29uLnN0cmluZ2lmeSBub29uLnBhcnNlKHNvdXJjZVRleHQpLCBleHQ6ICcuJytjZmdbZXh0XS5leHQsIGluZGVudDogJyAgJ1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IFwiZG9uJ3Qga25vdyBob3cgdG8gYnVpbGQgZmlsZXMgd2l0aCBleHRuYW1lIC4je2V4dC5ib2xkfSFcIi55ZWxsb3dcblxuICAgIGNhdGNoIGVcbiAgICAgICAga29ucmFkRXJyb3IgJ2NvbXBpbGUgZXJyb3InLCBlLCBzb3VyY2VGaWxlXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIFxuICAgIGNvbXBpbGVkXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBpbGVcblxuXG4iXX0=
//# sourceURL=../coffee/compile.coffee