// Generated by CoffeeScript 2.2.2
(function() {
  /*
   0000000   0000000   00     00  00000000   000  000      00000000  
  000       000   000  000   000  000   000  000  000      000       
  000       000   000  000000000  00000000   000  000      0000000   
  000       000   000  000 0 000  000        000  000      000       
   0000000   0000000   000   000  000        000  0000000  00000000  
  */
  var _, atomic, compile, error, fs, konradError, log, noon, slash;

  ({atomic, noon, slash, error, log, fs, _} = require('kxk'));

  konradError = require('./error');

  compile = function(sourceText, ext, sourceFile, targetFile, cfg) {
    var coffee, compiled, e, jsMap, mapcfg, pug, stylus;
    try {
      compiled = (function() {
        var ref;
        switch (ext) {
          case 'coffee':
            coffee = require('coffeescript');
            if ((ref = cfg[ext]) != null ? ref.map : void 0) {
              mapcfg = {
                sourceMap: true,
                inlineMap: true,
                sourceRoot: '.',
                filename: slash.relative(sourceFile, slash.dir(targetFile)),
                generatedFile: slash.file(targetFile)
              };
              jsMap = coffee.compile(sourceText, mapcfg);
              return jsMap.js;
            } else {
              return coffee.compile(sourceText);
            }
            break;
          case 'styl':
            stylus = require('stylus');
            return stylus(sourceText).set('filename', sourceFile).set('paths', [slash.dir(sourceFile)]).render();
          case 'pug':
            pug = require('pug');
            return pug.render(sourceText, {
              pretty: true
            });
          case 'json':
            return noon.stringify(JSON.parse(sourceText), {
              ext: '.' + cfg[ext].ext,
              indent: '  ',
              maxalign: 16
            });
          case 'noon':
            return noon.stringify(noon.parse(sourceText), {
              ext: '.' + cfg[ext].ext,
              indent: '  '
            });
          default:
            throw `don't know how to build files with extname .${ext.bold}!`.yellow;
        }
      })();
    } catch (error1) {
      e = error1;
      konradError('compile error', e, sourceFile);
      return null;
    }
    return compiled;
  };

  module.exports = compile;

}).call(this);
