/*
0000000    000   000  000  000      0000000  
000   000  000   000  000  000      000   000
0000000    000   000  000  000      000   000
000   000  000   000  000  000      000   000
0000000     0000000   000  0000000  0000000  
*/
var _, argDir, args, build, colors, compile, config, empty, error, fs, log, pretty, runcmd, should, slash, str, target, writeCompiled;

({args, slash, empty, fs, colors, str, error, _} = require('kxk'));

log = console.log;

pretty = require('./pretty');

config = require('./config');

argDir = require('./argdir');

should = require('./should');

target = require('./target');

compile = require('./compile');

runcmd = require('./runcmd');

build = function(sourceFile, opt, cb) {
  var cfg, ext, main, out, pwd, targetFile;
  if (args.debug) {
    log("source file".gray, sourceFile);
  }
  ext = slash.extname(sourceFile).substr(1);
  cfg = config.obj(sourceFile, opt);
  if (ext === 'js' && should('browserify', cfg, sourceFile)) {
    main = cfg.browserify.main;
    out = cfg.browserify.out;
    pwd = config.path('browserify', slash.resolve(sourceFile), opt);
    if (out !== slash.relative(sourceFile, pwd)) {
      log(pretty.filePath(_.padEnd(slash.relative(main, argDir()), 40), colors.yellow), "üîß  ", pretty.filePath(slash.relative(out, argDir()), colors.blue));
      runcmd('browserify', `${main} ${out}`, pwd);
    }
    return;
  }
  targetFile = target(sourceFile, opt);
  if (targetFile == null) {
    log(`no targetFile for source: ${sourceFile}`, opt);
    return;
  }
  if (args.debug) {
    log("target file".gray, targetFile);
  }
  // 00000000   00000000   0000000   0000000
  // 000   000  000       000   000  000   000
  // 0000000    0000000   000000000  000   000
  // 000   000  000       000   000  000   000
  // 000   000  00000000  000   000  0000000
  return fs.readFile(sourceFile, 'utf8', function(err, sourceText) {
    var compiled;
    if (err) {
      return error(`can't read ${sourceFile}`);
    }
    
    //  0000000   0000000   00     00  00000000   000  000      00000000  
    // 000       000   000  000   000  000   000  000  000      000       
    // 000       000   000  000000000  00000000   000  000      0000000   
    // 000       000   000  000 0 000  000        000  000      000       
    //  0000000   0000000   000   000  000        000  0000000  00000000  
    compiled = compile(sourceText, ext, sourceFile, targetFile, cfg);
    if (empty(compiled)) {
      if (args.verbose) {
        error(`compile failed for ${sourceFile}`);
      }
      return;
    }
    return fs.readFile(targetFile, 'utf8', function(err, targetData) {
      var stat, ttat;
      if (err || compiled !== targetData) {
        return writeCompiled(sourceFile, targetFile, compiled, cb);
      } else {
        if (args.debug) {
          log('unchanged'.green.dim, pretty.filePath(slash.relative(targetFile, argDir()), colors.gray));
        }
        if (args.verbose) {
          log(pretty.time(), `üëç  ${pretty.filePath(sourceFile)} ${'‚ñ∫'.bold.yellow} ${pretty.filePath(targetFile)}`);
        }
        stat = fs.statSync(sourceFile);
        ttat = fs.statSync(targetFile);
        if (stat.mtime.getTime() !== ttat.mtime.getTime()) {
          return fs.utimesSync(slash.resolve(targetFile), stat.atime, stat.mtime);
        }
      }
    });
  });
};

// 000   000  00000000   000  000000000  00000000
// 000 0 000  000   000  000     000     000
// 000000000  0000000    000     000     0000000
// 000   000  000   000  000     000     000
// 00     00  000   000  000     000     00000000
writeCompiled = function(sourceFile, targetFile, compiled, cb) {
  if (args.debug) {
    log('writeCompiled:', sourceFile, targetFile);
  }
  return fs.ensureDir(slash.dir(targetFile), function(err) {
    if (err) {
      return error(`can't create output  directory${slash.dir(targetFile)}`);
    }
    return fs.writeFile(targetFile, compiled, function(err) {
      if (!empty(err)) {
        return error(`can't  write${targetFile}!`, err);
      }
      if (!args.quiet) {
        if (args.verbose) {
          log(pretty.time(), `üëç   ${pretty.filePath(slash.tilde(sourceFile))} ${'‚ñ∫'.bold.yellow} ${pretty.filePath(slash.tilde(targetFile))}`);
        } else {
          log(pretty.time(), `üëç   ${pretty.filePath(slash.tilde(targetFile))}`);
        }
      }
      return typeof cb === "function" ? cb(sourceFile, targetFile) : void 0;
    });
  });
};

module.exports = build;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/build.coffee