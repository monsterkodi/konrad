// koffee 0.43.0

/*
0000000    000   000  000  000      0000000  
000   000  000   000  000  000      000   000
0000000    000   000  000  000      000   000
000   000  000   000  000  000      000   000
0000000     0000000   000  0000000  0000000
 */
var _, argDir, args, build, colors, compile, config, empty, fs, kerror, klog, pretty, ref, runcmd, should, slash, target, writeCompiled;

ref = require('kxk'), args = ref.args, slash = ref.slash, empty = ref.empty, fs = ref.fs, colors = ref.colors, klog = ref.klog, kerror = ref.kerror, _ = ref._;

pretty = require('./pretty');

config = require('./config');

argDir = require('./argdir');

should = require('./should');

target = require('./target');

compile = require('./compile');

runcmd = require('./runcmd');

build = function(sourceFile, opt, cb) {
    var cfg, ext, main, out, pwd, targetFile;
    if (args.debug) {
        klog("source file".gray, sourceFile);
    }
    ext = slash.extname(sourceFile).substr(1);
    cfg = config.obj(sourceFile, opt);
    if (ext === 'js' && should('browserify', cfg, sourceFile)) {
        main = cfg.browserify.main;
        out = cfg.browserify.out;
        pwd = config.path('browserify', slash.resolve(sourceFile), opt);
        if (out !== slash.relative(sourceFile, pwd)) {
            klog(pretty.filePath(_.padEnd(slash.relative(main, argDir()), 40), colors.yellow), "üîß  ", pretty.filePath(slash.relative(out, argDir()), colors.blue));
            runcmd('browserify', main + " " + out, pwd);
        }
        return;
    }
    targetFile = target(sourceFile, opt);
    if (targetFile == null) {
        console.warn("no targetFile for source: " + sourceFile, opt);
        return;
    }
    if (args.debug) {
        klog("target file".gray, targetFile);
    }
    return fs.readFile(sourceFile, 'utf8', function(err, sourceText) {
        var compiled;
        if (err) {
            return kerror("can't read " + sourceFile);
        }
        compiled = compile(sourceText, ext, sourceFile, targetFile, cfg);
        if (empty(compiled)) {
            if (args.verbose) {
                kerror("compile failed for " + sourceFile);
            }
            return;
        }
        return fs.readFile(targetFile, 'utf8', function(err, targetData) {
            var stat, ttat;
            if (err || compiled !== targetData) {
                return writeCompiled(sourceFile, targetFile, compiled, cb);
            } else {
                if (args.debug) {
                    klog('unchanged'.green.dim, pretty.filePath(slash.relative(targetFile, argDir()), colors.gray));
                }
                if (args.verbose) {
                    klog(pretty.time(), "üëç  " + (pretty.filePath(sourceFile)) + " " + '‚ñ∫'.bold.yellow + " " + (pretty.filePath(targetFile)));
                }
                stat = fs.statSync(sourceFile);
                ttat = fs.statSync(targetFile);
                if (stat.mtime.getTime() !== ttat.mtime.getTime()) {
                    return fs.utimesSync(slash.resolve(targetFile), stat.atime, stat.mtime);
                }
            }
        });
    });
};

writeCompiled = function(sourceFile, targetFile, compiled, cb) {
    return fs.ensureDir(slash.dir(targetFile), function(err) {
        if (err) {
            return kerror("can't create output  directory" + (slash.dir(targetFile)));
        }
        return fs.writeFile(targetFile, compiled, function(err) {
            if (!empty(err)) {
                return kerror("can't  write" + targetFile + "!", err);
            }
            if (!args.quiet) {
                if (args.verbose) {
                    klog(pretty.time(), "üëç   " + (pretty.filePath(slash.tilde(sourceFile))) + " " + '‚ñ∫'.bold.yellow + " " + (pretty.filePath(slash.tilde(targetFile))));
                } else {
                    klog(pretty.time(), "üëç   " + (pretty.filePath(slash.tilde(targetFile))));
                }
            }
            return typeof cb === "function" ? cb(sourceFile, targetFile) : void 0;
        });
    });
};

module.exports = build;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQXNELE9BQUEsQ0FBUSxLQUFSLENBQXRELEVBQUUsZUFBRixFQUFRLGlCQUFSLEVBQWUsaUJBQWYsRUFBc0IsV0FBdEIsRUFBMEIsbUJBQTFCLEVBQWtDLGVBQWxDLEVBQXdDLG1CQUF4QyxFQUFnRDs7QUFFaEQsTUFBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztBQUNWLE1BQUEsR0FBVSxPQUFBLENBQVEsVUFBUjs7QUFDVixNQUFBLEdBQVUsT0FBQSxDQUFRLFVBQVI7O0FBQ1YsTUFBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztBQUNWLE1BQUEsR0FBVSxPQUFBLENBQVEsVUFBUjs7QUFDVixPQUFBLEdBQVUsT0FBQSxDQUFRLFdBQVI7O0FBQ1YsTUFBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztBQUVWLEtBQUEsR0FBUSxTQUFDLFVBQUQsRUFBYSxHQUFiLEVBQWtCLEVBQWxCO0FBRUosUUFBQTtJQUFBLElBQXVDLElBQUksQ0FBQyxLQUE1QztRQUFBLElBQUEsQ0FBSyxhQUFhLENBQUMsSUFBbkIsRUFBeUIsVUFBekIsRUFBQTs7SUFFQSxHQUFBLEdBQU0sS0FBSyxDQUFDLE9BQU4sQ0FBYyxVQUFkLENBQXlCLENBQUMsTUFBMUIsQ0FBaUMsQ0FBakM7SUFFTixHQUFBLEdBQU0sTUFBTSxDQUFDLEdBQVAsQ0FBVyxVQUFYLEVBQXVCLEdBQXZCO0lBRU4sSUFBRyxHQUFBLEtBQU8sSUFBUCxJQUFnQixNQUFBLENBQU8sWUFBUCxFQUFxQixHQUFyQixFQUEwQixVQUExQixDQUFuQjtRQUNJLElBQUEsR0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ3RCLEdBQUEsR0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ3RCLEdBQUEsR0FBTyxNQUFNLENBQUMsSUFBUCxDQUFZLFlBQVosRUFBMEIsS0FB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LEtBQUssQ0FBQyxLQUFOLENBQVksVUFBWixDQUFoQixDQUFELENBQTNCLEVBSEo7aUJBREo7OzhDQU1BLEdBQUksWUFBWTtRQVRlLENBQW5DO0lBSmdDLENBQXBDO0FBSlk7O0FBbUJoQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAwMDAgICAwMDBcbjAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwXG4wMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAwMDAwMDAwICBcbiMjI1xuXG57IGFyZ3MsIHNsYXNoLCBlbXB0eSwgZnMsIGNvbG9ycywga2xvZywga2Vycm9yLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbnByZXR0eSAgPSByZXF1aXJlICcuL3ByZXR0eSdcbmNvbmZpZyAgPSByZXF1aXJlICcuL2NvbmZpZydcbmFyZ0RpciAgPSByZXF1aXJlICcuL2FyZ2RpcidcbnNob3VsZCAgPSByZXF1aXJlICcuL3Nob3VsZCdcbnRhcmdldCAgPSByZXF1aXJlICcuL3RhcmdldCdcbmNvbXBpbGUgPSByZXF1aXJlICcuL2NvbXBpbGUnXG5ydW5jbWQgID0gcmVxdWlyZSAnLi9ydW5jbWQnXG5cbmJ1aWxkID0gKHNvdXJjZUZpbGUsIG9wdCwgY2IpIC0+XG5cbiAgICBrbG9nIFwic291cmNlIGZpbGVcIi5ncmF5LCBzb3VyY2VGaWxlIGlmIGFyZ3MuZGVidWdcblxuICAgIGV4dCA9IHNsYXNoLmV4dG5hbWUoc291cmNlRmlsZSkuc3Vic3RyKDEpXG5cbiAgICBjZmcgPSBjb25maWcub2JqIHNvdXJjZUZpbGUsIG9wdFxuXG4gICAgaWYgZXh0ID09ICdqcycgYW5kIHNob3VsZCAnYnJvd3NlcmlmeScsIGNmZywgc291cmNlRmlsZVxuICAgICAgICBtYWluID0gY2ZnLmJyb3dzZXJpZnkubWFpblxuICAgICAgICBvdXQgID0gY2ZnLmJyb3dzZXJpZnkub3V0XG4gICAgICAgIHB3ZCAgPSBjb25maWcucGF0aCAnYnJvd3NlcmlmeScsIHNsYXNoLnJlc29sdmUoc291cmNlRmlsZSksIG9wdFxuICAgICAgICBpZiBvdXQgIT0gc2xhc2gucmVsYXRpdmUgc291cmNlRmlsZSwgcHdkXG4gICAgICAgICAgICBrbG9nIHByZXR0eS5maWxlUGF0aChfLnBhZEVuZChzbGFzaC5yZWxhdGl2ZShtYWluLCBhcmdEaXIoKSksIDQwKSwgY29sb3JzLnllbGxvdyksIFwi8J+UpyAgXCIsIHByZXR0eS5maWxlUGF0aChzbGFzaC5yZWxhdGl2ZShvdXQsIGFyZ0RpcigpKSwgY29sb3JzLmJsdWUpXG4gICAgICAgICAgICBydW5jbWQgJ2Jyb3dzZXJpZnknLCBcIiN7bWFpbn0gI3tvdXR9XCIsIHB3ZFxuICAgICAgICByZXR1cm5cblxuICAgIHRhcmdldEZpbGUgPSB0YXJnZXQgc291cmNlRmlsZSwgb3B0XG4gICAgaWYgbm90IHRhcmdldEZpbGU/XG4gICAgICAgIHdhcm4gXCJubyB0YXJnZXRGaWxlIGZvciBzb3VyY2U6ICN7c291cmNlRmlsZX1cIiwgb3B0XG4gICAgICAgIHJldHVyblxuXG4gICAga2xvZyBcInRhcmdldCBmaWxlXCIuZ3JheSwgdGFyZ2V0RmlsZSBpZiBhcmdzLmRlYnVnXG5cbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwXG5cbiAgICBmcy5yZWFkRmlsZSBzb3VyY2VGaWxlLCAndXRmOCcsIChlcnIsIHNvdXJjZVRleHQpIC0+XG5cbiAgICAgICAgaWYgZXJyIHRoZW4gcmV0dXJuIGtlcnJvciBcImNhbid0IHJlYWQgI3tzb3VyY2VGaWxlfVwiXG4gICAgICAgIFxuICAgICAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICBcbiAgICAgICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAwMDAgICAgICAgXG4gICAgICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIFxuICAgICAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAgICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgICAgIFxuICAgICAgICBjb21waWxlZCA9IGNvbXBpbGUgc291cmNlVGV4dCwgZXh0LCBzb3VyY2VGaWxlLCB0YXJnZXRGaWxlLCBjZmdcbiAgICAgICAgXG4gICAgICAgIGlmIGVtcHR5IGNvbXBpbGVkXG4gICAgICAgICAgICBpZiBhcmdzLnZlcmJvc2UgdGhlbiBrZXJyb3IgXCJjb21waWxlIGZhaWxlZCBmb3IgI3tzb3VyY2VGaWxlfVwiXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIGZzLnJlYWRGaWxlIHRhcmdldEZpbGUsICd1dGY4JywgKGVyciwgdGFyZ2V0RGF0YSkgLT5cblxuICAgICAgICAgICAgaWYgZXJyIG9yIGNvbXBpbGVkICE9IHRhcmdldERhdGFcblxuICAgICAgICAgICAgICAgIHdyaXRlQ29tcGlsZWQgc291cmNlRmlsZSwgdGFyZ2V0RmlsZSwgY29tcGlsZWQsIGNiXG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBrbG9nICd1bmNoYW5nZWQnLmdyZWVuLmRpbSwgcHJldHR5LmZpbGVQYXRoKHNsYXNoLnJlbGF0aXZlKHRhcmdldEZpbGUsIGFyZ0RpcigpKSwgY29sb3JzLmdyYXkpIGlmIGFyZ3MuZGVidWdcbiAgICAgICAgICAgICAgICBpZiBhcmdzLnZlcmJvc2VcbiAgICAgICAgICAgICAgICAgICAga2xvZyBwcmV0dHkudGltZSgpLCBcIvCfkY0gICN7cHJldHR5LmZpbGVQYXRoIHNvdXJjZUZpbGV9ICN7J+KWuicuYm9sZC55ZWxsb3d9ICN7cHJldHR5LmZpbGVQYXRoIHRhcmdldEZpbGV9XCJcbiAgICAgICAgICAgICAgICBzdGF0ID0gZnMuc3RhdFN5bmMgc291cmNlRmlsZVxuICAgICAgICAgICAgICAgIHR0YXQgPSBmcy5zdGF0U3luYyB0YXJnZXRGaWxlXG4gICAgICAgICAgICAgICAgaWYgc3RhdC5tdGltZS5nZXRUaW1lKCkgIT0gdHRhdC5tdGltZS5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICAgICAgZnMudXRpbWVzU3luYyBzbGFzaC5yZXNvbHZlKHRhcmdldEZpbGUpLCBzdGF0LmF0aW1lLCBzdGF0Lm10aW1lXG5cbiMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAgIDAwMFxuIyAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICAwMDBcbiMgMDAgICAgIDAwICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMFxuXG53cml0ZUNvbXBpbGVkID0gKHNvdXJjZUZpbGUsIHRhcmdldEZpbGUsIGNvbXBpbGVkLCBjYikgLT5cblxuICAgICMga2xvZyAnd3JpdGVDb21waWxlZDonLCBzb3VyY2VGaWxlLCB0YXJnZXRGaWxlIGlmIGFyZ3MuZGVidWdcbiAgICBcbiAgICBmcy5lbnN1cmVEaXIgc2xhc2guZGlyKHRhcmdldEZpbGUpLCAoZXJyKSAtPlxuXG4gICAgICAgIGlmIGVyciB0aGVuIHJldHVybiBrZXJyb3IgXCJjYW4ndCBjcmVhdGUgb3V0cHV0ICBkaXJlY3Rvcnkje3NsYXNoLmRpcih0YXJnZXRGaWxlKX1cIlxuXG4gICAgICAgIGZzLndyaXRlRmlsZSB0YXJnZXRGaWxlLCBjb21waWxlZCwgKGVycikgLT5cbiAgICAgICAgICAgIGlmIG5vdCBlbXB0eSBlcnIgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtlcnJvciBcImNhbid0ICB3cml0ZSN7dGFyZ2V0RmlsZX0hXCIsIGVyclxuICAgICAgICAgICAgaWYgbm90IGFyZ3MucXVpZXRcbiAgICAgICAgICAgICAgICBpZiBhcmdzLnZlcmJvc2VcbiAgICAgICAgICAgICAgICAgICAga2xvZyBwcmV0dHkudGltZSgpLCBcIvCfkY0gICAje3ByZXR0eS5maWxlUGF0aCBzbGFzaC50aWxkZSBzb3VyY2VGaWxlfSAjeyfilronLmJvbGQueWVsbG93fSAje3ByZXR0eS5maWxlUGF0aCBzbGFzaC50aWxkZSB0YXJnZXRGaWxlfVwiXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrbG9nIHByZXR0eS50aW1lKCksIFwi8J+RjSAgICN7cHJldHR5LmZpbGVQYXRoIHNsYXNoLnRpbGRlIHRhcmdldEZpbGV9XCJcblxuICAgICAgICAgICAgY2I/IHNvdXJjZUZpbGUsIHRhcmdldEZpbGVcblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZFxuIl19
//# sourceURL=../coffee/build.coffee