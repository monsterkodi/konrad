// koffee 1.14.0

/*
0000000    000   000  000  000      0000000  
000   000  000   000  000  000      000   000
0000000    000   000  000  000      000   000
000   000  000   000  000  000      000   000
0000000     0000000   000  0000000  0000000
 */
var _, argDir, args, build, compile, config, empty, fs, kerror, klog, kolor, pretty, ref, runcmd, should, slash, target, writeCompiled;

ref = require('kxk'), _ = ref._, args = ref.args, empty = ref.empty, fs = ref.fs, kerror = ref.kerror, klog = ref.klog, kolor = ref.kolor, slash = ref.slash;

pretty = require('./pretty');

config = require('./config');

argDir = require('./argdir');

should = require('./should');

target = require('./target');

compile = require('./compile');

runcmd = require('./runcmd');

build = function(sourceFile, opt, cb) {
    var cfg, ext, main, out, pwd, targetFile;
    if (args.debug) {
        klog("source file".gray, sourceFile);
    }
    ext = slash.extname(sourceFile).substr(1);
    cfg = config.obj(sourceFile, opt);
    if (ext === 'js' && should('browserify', cfg, sourceFile)) {
        main = cfg.browserify.main;
        out = cfg.browserify.out;
        pwd = config.path('browserify', slash.resolve(sourceFile), opt);
        if (out !== slash.relative(sourceFile, pwd)) {
            klog(pretty.filePath(_.padEnd(slash.relative(main, argDir()), 40), kolor.yellow), "üîß  ", pretty.filePath(slash.relative(out, argDir()), kolor.blue));
            runcmd('browserify', main + " " + out, pwd);
        }
        return;
    }
    targetFile = target(sourceFile, opt);
    if (targetFile == null) {
        console.warn("no targetFile for source: " + sourceFile, opt);
        return;
    }
    if (args.debug) {
        klog("target file".gray, targetFile);
    }
    return fs.readFile(sourceFile, 'utf8', function(err, sourceText) {
        var compiled, stat, ttat;
        if (err) {
            kerror("can't read " + sourceFile);
            cb();
            return;
        }
        compiled = compile(sourceText, ext, sourceFile, targetFile, cfg);
        if (empty(compiled)) {
            cb();
            return;
        }
        slash.logErrors = true;
        if (!slash.fileExists(targetFile) || slash.readText(targetFile) !== compiled) {
            return writeCompiled(sourceFile, targetFile, compiled, cb);
        } else {
            if (args.debug) {
                klog(kolor.green.dim('unchanged'), pretty.filePath(slash.relative(targetFile, argDir()), kolor.gray));
            }
            if (args.verbose) {
                console.log(pretty.time(), "üëç  " + (pretty.filePath(sourceFile)) + " " + (kolor.bold(kolor.yellow('‚ñ∫'))) + " " + (pretty.filePath(targetFile)));
            }
            stat = fs.statSync(sourceFile);
            ttat = fs.statSync(targetFile);
            if (stat.mtime.getTime() !== ttat.mtime.getTime()) {
                return fs.utimesSync(slash.resolve(targetFile), stat.atime, stat.mtime);
            }
        }
    });
};

writeCompiled = function(sourceFile, targetFile, compiled, cb) {
    fs.mkdirSync(slash.dir(targetFile), {
        recursive: true
    });
    slash.writeText(targetFile, compiled);
    if (!args.quiet) {
        if (args.verbose) {
            console.log(pretty.time(), "üëç   " + (pretty.filePath(slash.tilde(sourceFile))) + " " + (kolor.bold(kolor.yellow('‚ñ∫'))) + " " + (pretty.filePath(slash.tilde(targetFile))));
        } else {
            console.log(pretty.time(), "üëç   " + (pretty.filePath(slash.tilde(targetFile))));
        }
    }
    return typeof cb === "function" ? cb(sourceFile, targetFile) : void 0;
};

module.exports = build;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/build.coffee