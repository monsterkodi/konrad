  /*
  000   000   0000000   000000000   0000000  000   000
  000 0 000  000   000     000     000       000   000
  000000000  000000000     000     000       000000000
  000   000  000   000     000     000       000   000
  00     00  000   000     000      0000000  000   000
  */
var Watch, _, args, build, childp, colors, config, log, pkg, pretty, runcmd, should, slash, watch, watcher,
  indexOf = [].indexOf;

({watch, args, slash, childp, colors, _} = require('kxk'));

log = console.log;

pretty = require('./pretty');

should = require('./should');

runcmd = require('./runcmd');

config = require('./config');

build = require('./build');

pkg = require('../package.json');

watcher = null;

Watch = function(wlk, opt) {
  var start;
  start = function(cb) {
    var d, pass, ref, v;
    pass = function(p) {
      var ref;
      if (ref = slash.ext(p), indexOf.call(_.keys(opt), ref) >= 0) {
        return true;
      }
    };
    d = (ref = args.arguments[0]) != null ? ref : '.';
    v = `${pkg.version} ‚óè`.dim.gray;
    log(pretty.time(), `üëÅ   ${v} ${pretty.filePath(slash.resolve(d), colors.white)}`.gray);
    watcher = watch.watch(d, {
      recursive: true,
      ignore: wlk.ignore
    });
    return watcher.on('change', function(info) {
      if (pass(info.path)) {
        return cb(slash.path(info.path));
      }
    });
  };
  return start(function(sourceFile) {
    var o, test;
    sourceFile = slash.resolve(sourceFile);
    o = config.obj(sourceFile, opt);
    test = function(source) {
      if (should('test', o, source)) {
        return runcmd('test', source, config.path('test', slash.resolve(source), opt));
      }
    };
    if (!should('ignore', o, sourceFile)) {
      return build(sourceFile, opt, test);
    } else {
      return test(sourceFile);
    }
  });
};

module.exports = Watch;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiLi4vY29mZmVlL3dhdGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUFBLElBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBO0VBQUE7O0FBUUEsQ0FBQSxDQUFFLEtBQUYsRUFBUyxJQUFULEVBQWUsS0FBZixFQUFzQixNQUF0QixFQUE4QixNQUE5QixFQUFzQyxDQUF0QyxDQUFBLEdBQTRDLE9BQUEsQ0FBUSxLQUFSLENBQTVDOztBQUVBLEdBQUEsR0FBUyxPQUFPLENBQUM7O0FBQ2pCLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxNQUFBLEdBQVMsT0FBQSxDQUFRLFVBQVI7O0FBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUNULE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLFNBQVI7O0FBQ1QsR0FBQSxHQUFTLE9BQUEsQ0FBUSxpQkFBUjs7QUFFVCxPQUFBLEdBQVU7O0FBRVYsS0FBQSxHQUFRLFFBQUEsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFBO0FBRUosTUFBQTtFQUFBLEtBQUEsR0FBUSxRQUFBLENBQUMsRUFBRCxDQUFBO0FBRUosUUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLElBQUEsR0FBTyxRQUFBLENBQUMsQ0FBRCxDQUFBO0FBQ0gsVUFBQTtNQUFBLFVBQUcsS0FBSyxDQUFDLEdBQU4sQ0FBVSxDQUFWLENBQUEsRUFBQSxhQUFnQixDQUFDLENBQUMsSUFBRixDQUFPLEdBQVAsQ0FBaEIsRUFBQSxHQUFBLE1BQUg7ZUFDSSxLQURKOztJQURHO0lBSVAsQ0FBQSw2Q0FBd0I7SUFDeEIsQ0FBQSxHQUFJLENBQUEsQ0FBQSxDQUFHLEdBQUcsQ0FBQyxPQUFQLENBQWUsRUFBZixDQUFrQixDQUFDLEdBQUcsQ0FBQztJQUMzQixHQUFBLENBQUksTUFBTSxDQUFDLElBQVAsQ0FBQSxDQUFKLEVBQW1CLENBQUEsS0FBQSxDQUFBLENBQVEsQ0FBUixFQUFBLENBQUEsQ0FBYSxNQUFNLENBQUMsUUFBUCxDQUFnQixLQUFLLENBQUMsT0FBTixDQUFjLENBQWQsQ0FBaEIsRUFBa0MsTUFBTSxDQUFDLEtBQXpDLENBQWIsQ0FBQSxDQUE2RCxDQUFDLElBQWpGO0lBQ0EsT0FBQSxHQUFVLEtBQUssQ0FBQyxLQUFOLENBQVksQ0FBWixFQUFlO01BQUEsU0FBQSxFQUFVLElBQVY7TUFBZ0IsTUFBQSxFQUFPLEdBQUcsQ0FBQztJQUEzQixDQUFmO1dBQ1YsT0FBTyxDQUFDLEVBQVIsQ0FBVyxRQUFYLEVBQXFCLFFBQUEsQ0FBQyxJQUFELENBQUE7TUFBVSxJQUFHLElBQUEsQ0FBSyxJQUFJLENBQUMsSUFBVixDQUFIO2VBQXVCLEVBQUEsQ0FBRyxLQUFLLENBQUMsSUFBTixDQUFXLElBQUksQ0FBQyxJQUFoQixDQUFILEVBQXZCOztJQUFWLENBQXJCO0VBVkk7U0FZUixLQUFBLENBQU0sUUFBQSxDQUFDLFVBQUQsQ0FBQTtBQUVGLFFBQUEsQ0FBQSxFQUFBO0lBQUEsVUFBQSxHQUFhLEtBQUssQ0FBQyxPQUFOLENBQWMsVUFBZDtJQUNiLENBQUEsR0FBSSxNQUFNLENBQUMsR0FBUCxDQUFXLFVBQVgsRUFBdUIsR0FBdkI7SUFFSixJQUFBLEdBQU8sUUFBQSxDQUFDLE1BQUQsQ0FBQTtNQUNILElBQUcsTUFBQSxDQUFPLE1BQVAsRUFBZSxDQUFmLEVBQWtCLE1BQWxCLENBQUg7ZUFDSSxNQUFBLENBQU8sTUFBUCxFQUFlLE1BQWYsRUFBdUIsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFaLEVBQW9CLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZCxDQUFwQixFQUEyQyxHQUEzQyxDQUF2QixFQURKOztJQURHO0lBSVAsSUFBRyxDQUFJLE1BQUEsQ0FBTyxRQUFQLEVBQWlCLENBQWpCLEVBQW9CLFVBQXBCLENBQVA7YUFDSSxLQUFBLENBQU0sVUFBTixFQUFrQixHQUFsQixFQUF1QixJQUF2QixFQURKO0tBQUEsTUFBQTthQUdJLElBQUEsQ0FBSyxVQUFMLEVBSEo7O0VBVEUsQ0FBTjtBQWRJOztBQTRCUixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuMDAwMDAwMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuMDAgICAgIDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuIyMjXG5cbnsgd2F0Y2gsIGFyZ3MsIHNsYXNoLCBjaGlsZHAsIGNvbG9ycywgXyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5sb2cgICAgPSBjb25zb2xlLmxvZ1xucHJldHR5ID0gcmVxdWlyZSAnLi9wcmV0dHknXG5zaG91bGQgPSByZXF1aXJlICcuL3Nob3VsZCdcbnJ1bmNtZCA9IHJlcXVpcmUgJy4vcnVuY21kJ1xuY29uZmlnID0gcmVxdWlyZSAnLi9jb25maWcnXG5idWlsZCAgPSByZXF1aXJlICcuL2J1aWxkJ1xucGtnICAgID0gcmVxdWlyZSAnLi4vcGFja2FnZS5qc29uJ1xuXG53YXRjaGVyID0gbnVsbFxuXG5XYXRjaCA9ICh3bGssIG9wdCkgLT5cbiAgICBcbiAgICBzdGFydCA9IChjYikgLT5cblxuICAgICAgICBwYXNzID0gKHApIC0+IFxuICAgICAgICAgICAgaWYgc2xhc2guZXh0KHApIGluIF8ua2V5cyhvcHQpXG4gICAgICAgICAgICAgICAgdHJ1ZVxuXG4gICAgICAgIGQgPSBhcmdzLmFyZ3VtZW50c1swXSA/ICcuJ1xuICAgICAgICB2ID0gXCIje3BrZy52ZXJzaW9ufSDil49cIi5kaW0uZ3JheVxuICAgICAgICBsb2cgcHJldHR5LnRpbWUoKSwgXCLwn5GBICAgI3t2fSAje3ByZXR0eS5maWxlUGF0aCBzbGFzaC5yZXNvbHZlKGQpLCBjb2xvcnMud2hpdGV9XCIuZ3JheVxuICAgICAgICB3YXRjaGVyID0gd2F0Y2gud2F0Y2ggZCwgcmVjdXJzaXZlOnRydWUsIGlnbm9yZTp3bGsuaWdub3JlXG4gICAgICAgIHdhdGNoZXIub24gJ2NoYW5nZScsIChpbmZvKSAtPiBpZiBwYXNzIGluZm8ucGF0aCB0aGVuIGNiIHNsYXNoLnBhdGggaW5mby5wYXRoXG5cbiAgICBzdGFydCAoc291cmNlRmlsZSkgLT5cblxuICAgICAgICBzb3VyY2VGaWxlID0gc2xhc2gucmVzb2x2ZSBzb3VyY2VGaWxlXG4gICAgICAgIG8gPSBjb25maWcub2JqIHNvdXJjZUZpbGUsIG9wdFxuXG4gICAgICAgIHRlc3QgPSAoc291cmNlKSAtPlxuICAgICAgICAgICAgaWYgc2hvdWxkICd0ZXN0Jywgbywgc291cmNlXG4gICAgICAgICAgICAgICAgcnVuY21kICd0ZXN0Jywgc291cmNlLCBjb25maWcucGF0aCAndGVzdCcsIHNsYXNoLnJlc29sdmUoc291cmNlKSwgb3B0XG5cbiAgICAgICAgaWYgbm90IHNob3VsZCAnaWdub3JlJywgbywgc291cmNlRmlsZVxuICAgICAgICAgICAgYnVpbGQgc291cmNlRmlsZSwgb3B0LCB0ZXN0XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRlc3Qgc291cmNlRmlsZVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdhdGNoXG4iXX0=
//# sourceURL=../coffee/watch.coffee