  /*
  000   000   0000000   000000000   0000000  000   000
  000 0 000  000   000     000     000       000   000
  000000000  000000000     000     000       000000000
  000   000  000   000     000     000       000   000
  00     00  000   000     000      0000000  000   000
  */
var Watch, _, args, build, childp, colors, config, log, pkg, pretty, runcmd, should, slash, watch, watcher,
  indexOf = [].indexOf;

({watch, args, slash, childp, colors, _} = require('kxk'));

log = console.log;

pretty = require('./pretty');

should = require('./should');

runcmd = require('./runcmd');

config = require('./config');

build = require('./build');

pkg = require('../package.json');

watcher = null;

Watch = function(wlk, opt) {
  var start;
  start = function(cb) {
    var d, pass, ref, v;
    pass = function(p) {
      var ref;
      if (ref = slash.extname(p).substr(1), indexOf.call(_.keys(opt), ref) >= 0) {
        return true;
      }
    };
    d = (ref = args.arguments[0]) != null ? ref : '.';
    v = `${pkg.version} ●`.dim.gray;
    log(pretty.time(), `👁   ${v} ${pretty.filePath(slash.resolve(d), colors.white)}`.gray);
    log('watch.ignore', wlk.ignore);
    watcher = watch.watch(d);
    // watcher = require('chokidar').watch d,
    // ignored:        wlk.ignore
    // ignoreInitial:  true
    // usePolling:     false
    // useFsEvents:    true
    // .on 'add',    (p) -> if pass p then cb slash.path p
    return watcher.on('change', function(p) {
      if (pass(p)) {
        return cb(slash.path(p));
      }
    });
  };
  return start(function(sourceFile) {
    var o, test;
    sourceFile = slash.resolve(sourceFile);
    o = config.obj(sourceFile, opt);
    test = function(source) {
      if (should('test', o, source)) {
        return runcmd('test', source, config.path('test', slash.resolve(source), opt));
      }
    };
    if (!should('ignore', o, sourceFile)) {
      return build(sourceFile, opt, test);
    } else {
      return test(sourceFile);
    }
  });
};

module.exports = Watch;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiLi4vY29mZmVlL3dhdGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUFBLElBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBO0VBQUE7O0FBUUEsQ0FBQSxDQUFFLEtBQUYsRUFBUyxJQUFULEVBQWUsS0FBZixFQUFzQixNQUF0QixFQUE4QixNQUE5QixFQUFzQyxDQUF0QyxDQUFBLEdBQTRDLE9BQUEsQ0FBUSxLQUFSLENBQTVDOztBQUVBLEdBQUEsR0FBUyxPQUFPLENBQUM7O0FBQ2pCLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxNQUFBLEdBQVMsT0FBQSxDQUFRLFVBQVI7O0FBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUNULE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLFNBQVI7O0FBQ1QsR0FBQSxHQUFTLE9BQUEsQ0FBUSxpQkFBUjs7QUFFVCxPQUFBLEdBQVU7O0FBRVYsS0FBQSxHQUFRLFFBQUEsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFBO0FBRUosTUFBQTtFQUFBLEtBQUEsR0FBUSxRQUFBLENBQUMsRUFBRCxDQUFBO0FBRUosUUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLElBQUEsR0FBTyxRQUFBLENBQUMsQ0FBRCxDQUFBO0FBQU8sVUFBQTtNQUFBLFVBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLENBQWdCLENBQUMsTUFBakIsQ0FBd0IsQ0FBeEIsQ0FBQSxFQUFBLGFBQThCLENBQUMsQ0FBQyxJQUFGLENBQU8sR0FBUCxDQUE5QixFQUFBLEdBQUEsTUFBSDtlQUFrRCxLQUFsRDs7SUFBUDtJQUVQLENBQUEsNkNBQXdCO0lBQ3hCLENBQUEsR0FBSSxDQUFBLENBQUEsQ0FBRyxHQUFHLENBQUMsT0FBUCxDQUFlLEVBQWYsQ0FBa0IsQ0FBQyxHQUFHLENBQUM7SUFDM0IsR0FBQSxDQUFJLE1BQU0sQ0FBQyxJQUFQLENBQUEsQ0FBSixFQUFtQixDQUFBLEtBQUEsQ0FBQSxDQUFRLENBQVIsRUFBQSxDQUFBLENBQWEsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLENBQWhCLEVBQWtDLE1BQU0sQ0FBQyxLQUF6QyxDQUFiLENBQUEsQ0FBNkQsQ0FBQyxJQUFqRjtJQUNBLEdBQUEsQ0FBSSxjQUFKLEVBQW9CLEdBQUcsQ0FBQyxNQUF4QjtJQUNBLE9BQUEsR0FBVSxLQUFLLENBQUMsS0FBTixDQUFZLENBQVosRUFOVjs7Ozs7OztXQWFBLE9BRUksQ0FBQyxFQUZMLENBRVEsUUFGUixFQUVrQixRQUFBLENBQUMsQ0FBRCxDQUFBO01BQU8sSUFBRyxJQUFBLENBQUssQ0FBTCxDQUFIO2VBQWUsRUFBQSxDQUFHLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBWCxDQUFILEVBQWY7O0lBQVAsQ0FGbEI7RUFmSTtTQW1CUixLQUFBLENBQU0sUUFBQSxDQUFDLFVBQUQsQ0FBQTtBQUVGLFFBQUEsQ0FBQSxFQUFBO0lBQUEsVUFBQSxHQUFhLEtBQUssQ0FBQyxPQUFOLENBQWMsVUFBZDtJQUNiLENBQUEsR0FBSSxNQUFNLENBQUMsR0FBUCxDQUFXLFVBQVgsRUFBdUIsR0FBdkI7SUFFSixJQUFBLEdBQU8sUUFBQSxDQUFDLE1BQUQsQ0FBQTtNQUNILElBQUcsTUFBQSxDQUFPLE1BQVAsRUFBZSxDQUFmLEVBQWtCLE1BQWxCLENBQUg7ZUFDSSxNQUFBLENBQU8sTUFBUCxFQUFlLE1BQWYsRUFBdUIsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFaLEVBQW9CLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZCxDQUFwQixFQUEyQyxHQUEzQyxDQUF2QixFQURKOztJQURHO0lBSVAsSUFBRyxDQUFJLE1BQUEsQ0FBTyxRQUFQLEVBQWlCLENBQWpCLEVBQW9CLFVBQXBCLENBQVA7YUFDSSxLQUFBLENBQU0sVUFBTixFQUFrQixHQUFsQixFQUF1QixJQUF2QixFQURKO0tBQUEsTUFBQTthQUdJLElBQUEsQ0FBSyxVQUFMLEVBSEo7O0VBVEUsQ0FBTjtBQXJCSTs7QUFtQ1IsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDBcbjAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDBcbjAwMDAwMDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAwMDAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDBcbjAwICAgICAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAwMDAwMDAwICAwMDAgICAwMDBcbiMjI1xuXG57IHdhdGNoLCBhcmdzLCBzbGFzaCwgY2hpbGRwLCBjb2xvcnMsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxubG9nICAgID0gY29uc29sZS5sb2dcbnByZXR0eSA9IHJlcXVpcmUgJy4vcHJldHR5J1xuc2hvdWxkID0gcmVxdWlyZSAnLi9zaG91bGQnXG5ydW5jbWQgPSByZXF1aXJlICcuL3J1bmNtZCdcbmNvbmZpZyA9IHJlcXVpcmUgJy4vY29uZmlnJ1xuYnVpbGQgID0gcmVxdWlyZSAnLi9idWlsZCdcbnBrZyAgICA9IHJlcXVpcmUgJy4uL3BhY2thZ2UuanNvbidcblxud2F0Y2hlciA9IG51bGxcblxuV2F0Y2ggPSAod2xrLCBvcHQpIC0+XG4gICAgXG4gICAgc3RhcnQgPSAoY2IpIC0+XG5cbiAgICAgICAgcGFzcyA9IChwKSAtPiBpZiBzbGFzaC5leHRuYW1lKHApLnN1YnN0cigxKSBpbiBfLmtleXMob3B0KSB0aGVuIHRydWVcblxuICAgICAgICBkID0gYXJncy5hcmd1bWVudHNbMF0gPyAnLidcbiAgICAgICAgdiA9IFwiI3twa2cudmVyc2lvbn0g4pePXCIuZGltLmdyYXlcbiAgICAgICAgbG9nIHByZXR0eS50aW1lKCksIFwi8J+RgSAgICN7dn0gI3twcmV0dHkuZmlsZVBhdGggc2xhc2gucmVzb2x2ZShkKSwgY29sb3JzLndoaXRlfVwiLmdyYXlcbiAgICAgICAgbG9nICd3YXRjaC5pZ25vcmUnLCB3bGsuaWdub3JlXG4gICAgICAgIHdhdGNoZXIgPSB3YXRjaC53YXRjaCBkXG4gICAgICAgICMgd2F0Y2hlciA9IHJlcXVpcmUoJ2Nob2tpZGFyJykud2F0Y2ggZCxcbiAgICAgICAgICAgICMgaWdub3JlZDogICAgICAgIHdsay5pZ25vcmVcbiAgICAgICAgICAgICMgaWdub3JlSW5pdGlhbDogIHRydWVcbiAgICAgICAgICAgICMgdXNlUG9sbGluZzogICAgIGZhbHNlXG4gICAgICAgICAgICAjIHVzZUZzRXZlbnRzOiAgICB0cnVlXG5cbiAgICAgICAgd2F0Y2hlclxuICAgICAgICAgICAgIyAub24gJ2FkZCcsICAgIChwKSAtPiBpZiBwYXNzIHAgdGhlbiBjYiBzbGFzaC5wYXRoIHBcbiAgICAgICAgICAgIC5vbiAnY2hhbmdlJywgKHApIC0+IGlmIHBhc3MgcCB0aGVuIGNiIHNsYXNoLnBhdGggcFxuXG4gICAgc3RhcnQgKHNvdXJjZUZpbGUpIC0+XG5cbiAgICAgICAgc291cmNlRmlsZSA9IHNsYXNoLnJlc29sdmUgc291cmNlRmlsZVxuICAgICAgICBvID0gY29uZmlnLm9iaiBzb3VyY2VGaWxlLCBvcHRcblxuICAgICAgICB0ZXN0ID0gKHNvdXJjZSkgLT5cbiAgICAgICAgICAgIGlmIHNob3VsZCAndGVzdCcsIG8sIHNvdXJjZVxuICAgICAgICAgICAgICAgIHJ1bmNtZCAndGVzdCcsIHNvdXJjZSwgY29uZmlnLnBhdGggJ3Rlc3QnLCBzbGFzaC5yZXNvbHZlKHNvdXJjZSksIG9wdFxuXG4gICAgICAgIGlmIG5vdCBzaG91bGQgJ2lnbm9yZScsIG8sIHNvdXJjZUZpbGVcbiAgICAgICAgICAgIGJ1aWxkIHNvdXJjZUZpbGUsIG9wdCwgdGVzdFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0ZXN0IHNvdXJjZUZpbGVcblxubW9kdWxlLmV4cG9ydHMgPSBXYXRjaFxuIl19
//# sourceURL=../coffee/watch.coffee