// Generated by CoffeeScript 2.2.2
(function() {
  /*
  000   000   0000000   000000000   0000000  000   000
  000 0 000  000   000     000     000       000   000
  000000000  000000000     000     000       000000000
  000   000  000   000     000     000       000   000
  00     00  000   000     000      0000000  000   000
  */
  var _, args, build, childp, colors, config, log, pkg, pretty, runcmd, should, slash, watch, watcher,
    indexOf = [].indexOf;

  ({args, slash, childp, colors, _} = require('kxk'));

  log = console.log;

  pretty = require('./pretty');

  should = require('./should');

  runcmd = require('./runcmd');

  config = require('./config');

  build = require('./build');

  pkg = require('../package.json');

  watcher = null;

  watch = function(wlk, opt) {
    var start;
    start = function(cb) {
      var d, pass, ref, v;
      pass = function(p) {
        var ref;
        if (ref = slash.extname(p).substr(1), indexOf.call(_.keys(opt), ref) >= 0) {
          return true;
        }
      };
      d = (ref = args.arguments[0]) != null ? ref : '.';
      v = `${pkg.version} ‚óè`.dim.gray;
      log(pretty.time(), `üëÅ   ${v} ${pretty.filePath(slash.resolve(d), colors.white)}`.gray);
      watcher = require('chokidar').watch(d, {
        ignored: wlk.ignore,
        ignoreInitial: true,
        usePolling: false,
        useFsEvents: true
      });
      return watcher.on('add', function(p) {
        if (pass(p)) {
          return cb(slash.path(p));
        }
      }).on('change', function(p) {
        if (pass(p)) {
          return cb(slash.path(p));
        }
      });
    };
    return start(function(sourceFile) {
      var o, test;
      sourceFile = slash.resolve(sourceFile);
      o = config.obj(sourceFile, opt);
      test = function(source) {
        if (should('test', o, source)) {
          return runcmd('test', source, config.path('test', slash.resolve(source), opt));
        }
      };
      if (!should('ignore', o, sourceFile)) {
        return build(sourceFile, opt, test);
      } else {
        return test(sourceFile);
      }
    });
  };

  module.exports = watch;

}).call(this);
